"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readImageAsBase64 = exports.isAnyStepFailed = exports.escapeRegExp = exports.getLabelsFromEnv = exports.md5 = void 0;
const crypto_1 = require("crypto");
const promises_1 = require("fs/promises");
const process_1 = require("process");
const model_1 = require("./model");
const md5 = (data) => (0, crypto_1.createHash)("md5").update(data).digest("hex");
exports.md5 = md5;
const getLabelsFromEnv = () => {
    const envKeys = Object.keys(process_1.env);
    const labels = [];
    envKeys.forEach((key) => {
        var _a;
        const labelRegexp = /^ALLURE_LABEL_(?<labelName>.+)$/;
        const match = key.match(labelRegexp);
        if (match) {
            const labelName = (_a = match.groups) === null || _a === void 0 ? void 0 : _a.labelName;
            const envValue = process.env[key];
            if (labelName && envValue) {
                labels.push({ name: labelName.toLocaleLowerCase(), value: envValue });
            }
        }
    });
    return labels;
};
exports.getLabelsFromEnv = getLabelsFromEnv;
const reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
const escapeRegExp = (value) => {
    return reHasRegExpChar.test(value) ? value.replace(reRegExpChar, "\\$&") : value;
};
exports.escapeRegExp = escapeRegExp;
const isAnyStepFailed = (item) => {
    const isFailed = item.status === model_1.Status.FAILED;
    if (isFailed || item.steps.length === 0) {
        return isFailed;
    }
    return !!item.steps.find((step) => (0, exports.isAnyStepFailed)(step));
};
exports.isAnyStepFailed = isAnyStepFailed;
const readImageAsBase64 = async (path) => {
    try {
        const file = await (0, promises_1.readFile)(path, { encoding: "base64" });
        return file ? `data:image/png;base64,${file}` : undefined;
    }
    catch (e) {
        return undefined;
    }
};
exports.readImageAsBase64 = readImageAsBase64;
//# sourceMappingURL=utils.js.map